{"version":3,"sources":["../src/xublit-io.es6"],"names":[],"mappings":"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","file":"xublit-io.js","sourcesContent":["import 'babel-polyfill';\n\nimport EventEmitter from 'events';\nimport Injector from 'xublit-injector';\n\nimport * as path from 'path';\n\n/**\n * XublitApp\n *\n * @class\n */\nexport default class XublitApp extends EventEmitter {\n\n    /**\n     * Constructor\n     *\n     * @method     constructor\n     * @param      {object}  opts    Options for the XublitApp\n     */\n    constructor (opts) {\n\n        super();\n\n        opts = parseOptions(this, opts);\n\n        initInjector(this, {\n            baseDir: opts.baseDir,\n            includeDirs: this.includeDirs,\n            bootstrapScopeVars: {\n                app: this,\n            },\n        });\n\n    }\n\n    get includeDirs () {\n\n        var opts = this.options;\n\n        var includeDirs = opts.includeDirs.concat([\n            path.join(opts.baseDir, opts.srcDir),\n        ]);\n\n        if (true === opts.includeNpmXublits) {\n            includeDirs.push(\n                path.join(opts.baseDir, 'node_modules', 'xublit-*')\n            );\n        }\n\n        return includeDirs;\n\n    }\n\n    emit () {\n        throw new Error('No.');\n    }\n\n    /**\n     * Run `fn` before starting\n     * \n     * Same as calling `xublitApp.once('before:start', fn)`\n     *\n     * @method     beforeStart\n     * @param      {Function}  fn      The function to run\n     * @return     {XublitApp}\n     */\n    beforeStart (fn) {\n        this.once('before:start', fn);\n        return this;\n    }\n\n    /**\n     * Run `fn` when all modules have been bootstrapped\n     * \n     * This is the best place to get your modules to do startup things like\n     * connecting to databases, starting web servers, etc.\n     * \n     * Same as calling `xublitApp.once('bootstrapped', fn)`\n     *\n     * @method     afterBootstrap\n     * @param      {Function}  fn      The function to run\n     * @return     {XublitApp}\n     */\n    afterBootstrap (fn) {\n        this.once('bootstrapped', fn);\n        return this;\n    }\n\n    /**\n     * Run `fn` when the app is started\n     *\n     * @method     onceStarted\n     * @param      {Function}  fn      The function to run\n     * @return     {XublitApp}\n     */\n    onceStarted (fn) {\n        this.once('started', fn);\n        return this;\n    }\n\n    /**\n     * Starts the XublitApp by bootstrapping all modules\n     *\n     * @method     start\n     * @return     {XublitApp}\n     */\n    start () {\n\n        emit(this, 'before:start');\n\n        this.injector.bootstrap();\n\n        emit(this, 'bootstrapped');\n        emit(this, 'started');\n\n        return this;\n\n    }\n\n    /**\n     * Stops the XublitApp\n     *\n     * @method     stop\n     * @return     {XublitApp}\n     */\n    stop () {\n\n        this.on('stop', () => {\n            this.halt();\n        });\n\n        emit(this, 'stop');\n\n        return this;\n\n    }\n\n    /**\n     * Exits the process\n     *\n     * @method     halt\n     * @param      {boolean}  confirm  Must be true to exit\n     * @return     {XublitApp}\n     */\n    halt (confirm) {\n        \n        if (true !== confirm) {\n            return this;\n        }\n        \n        process.exit();\n\n    }\n\n}\n\nfunction initInjector (xublitApp, opts) {\n    Object.defineProperty(xublitApp, 'injector', {\n        value: new Injector(opts),\n    });\n}\n\nfunction parseOptions (xublitApp, opts) {\n\n    if (!opts.baseDir) {\n        throw new Error('Missing \"baseDir\" option');\n    }\n\n    Object.defineProperty(xublitApp, 'options', {\n        value: {},\n    });\n\n    var defaults = {\n        baseDir: '',\n        srcDir: './src',\n        etcDir: './etc',\n        includeNpmXublits: true,\n        includeDirs: [],\n    };\n\n    Object.keys(defaults).forEach((key) => {\n\n        var value = key in opts ? opts[key] : defaults[key];\n\n        switch (key) {\n\n            case 'includeDirs':\n                Injector.assertValidIncludeDirs(value);\n                value = value.slice(0);\n                break;\n\n        }\n\n        Object.defineProperty(xublitApp.options, key, {\n            value: value,\n            enumerable: true,\n        });\n\n    });\n\n    return xublitApp.options;\n\n}\n\nfunction emit (xublitApp) {\n    var emitArgs = [...arguments];\n    emitArgs.shift();\n    EventEmitter.prototype.emit.apply(xublitApp, emitArgs);\n}\n"]}